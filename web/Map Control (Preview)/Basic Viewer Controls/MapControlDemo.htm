<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>Map Control Demo</title>

    <meta http-equiv='Content-Type' content='text/html; charset=utf-8' />
    <meta charset="utf-8" http-equiv="X-UA-Compatible" content="IE=edge" />

   
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

    <!-- Load the Vexcel Map Control and required Styles -->
    <script src="https://preview.app.vexcelgroup.com/map/0.0.4/Vexcel.js"></script>
    <link rel="stylesheet" href="https://preview.app.vexcelgroup.com/map/0.0.4/css/styles.css" type="text/css"/>

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">

    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css"
   integrity="sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A=="
   crossorigin=""/>

   <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"
   integrity="sha512-XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA=="
   crossorigin=""></script>



	</head>

    <body>
        <div class="container-fluid">
            
            <nav class="navbar navbar-light bg-light">                   
                <form class="form-inline" onsubmit="return false;">
                    <ul>
                    <input class="form-control mr-sm-2" type="text" placeholder="User ID" aria-label="Login" id="txtUserid" size="20"  />
                    <button class="btn btn-outline-success my-2 my-sm-0"  id="NextBtn" type="button"  onClick="getUserType()" >Next</button> <br />
                    <input class="form-control mr-sm-2" style = "display: none" type="password" placeholder="Password" aria-label="Password" id="pwBox" size="20"   />
                    <button class="btn btn-outline-success my-2 my-sm-0" style="display: none" id="LoginBtn" type="button"  onClick="Login()" >Login</button>
                    </ul>
                </form>
                <div>
                    <h5>Map Control Demo</h5>
                    <input type="text" placeholder="Search" aria-label="Search" style="height:37px; border-radius:5px" value="27.858696,-82.713000" id="searchBox" size="35" /> 
                    <button style="border-radius:5px; border:5px; height:37px; background-color:rgb(109, 182, 184)" id="SearchBtn" type="button" onClick="parseCoordinates()"" >Search</button>
                </div>
                
                <div class="dropdown">
                    <button class="btn btn-primary dropdown-toggle" type="button" id="dropdownMenu6" data-toggle="dropdown" 
                        aria-haspopup="true" aria-expanded="false">Settings</button>
                    <div class="dropdown-menu" aria-labelledby="dropdownMenu6">
                        <div class="form-check"> 
                                                        
                            <div class="dropdown-divider"></div>
                            <a class='dropdown-item' href='javascript:showAbout()'>About...</a>
                        </div>                                             
                    </div>
                </div>

            </nav>          

            <div class="row row-eq-height h-75">
                <div class="col h-75"  >    
                    <div class="card ">    
                        <div class="card-header" id="infoHeader">
                                
                        </div>
                        <div class="card-body" style="max-height: 70vh; overflow-y: auto; ">  
                            <div id="infoBody"  class="scrollable"> 
                                <div class="text-center">
                                    <br><br><br>
                                    <img src="http://gicapps.azurewebsites.net/static/img/searchprompt.jpg" width="160" height="160" alt="">
                                    <h4>Login and then <br>search for a location<br>to get started.</h4>
                                    
                                </div>
                            </div>
                        </div>       
                    </div>
                </div>
                
                <div id="mapContainer" class="col-9">
                    <div  id="myMap">
                    
                    </div>
                    <div id="leafMap"></div>

                </div>
                
                
                
                
            </div>

        </div>


    </body>

    <script>

        //Initialize variables for use

        var authToken = window.localStorage.getItem("authToken") || "";
        const redirect_uri = "http://localhost:5500/Footprints/MapControlDemo.htm";

        var vexMap;
        var layerManager;
        var vectorLayer;
        var pushpinLayer;

        var latitude = 27.858696;  
        var longitude = -82.713000;

        function loadMapScenario() {    

            //Attempt to login using federated auth
            const queryString = window.location.search;
            const urlParams = new URLSearchParams(queryString);

            // Auth code & state
            const code = urlParams.get('code');
            const state = urlParams.get('state');
            if (code)
            {
                // Disable user input
                document.getElementById("txtUserid").value = state;
                document.getElementById("txtUserid").disabled = true;
                // Hide "Next" button
                document.getElementById("NextBtn").style = "display: none";
                // Get federated token
                refreshFederatedAuthToken(code, state);
            }
            
            //If we don't have an authtoken yet, exit
            if (authToken=="") return;

            let instanceId = 2165; // 2165;  //Hardcoded to "GIC" instance for now.
        
            let map = document.getElementById('myMap');
            while (map.firstChild) {
                map.removeChild(map.firstChild);
            }

            //Create the map object, setting initialization parameters
            vexMap = new Vexcel.Map({
                //target div
                target: 'myMap',
                //auth token
                token: authToken,
                //optional parameter, enables the layer list inside the map control
                layerSwitcher: true,
                //instance ID for GIC
                instanceId: instanceId,
                //starting center point lat/long and zoom on load
                center: [longitude, latitude],
                zoom: 19,

                //initialization callback can be used for many things, including setting up layers
                init: {
                    layers: true,
                    callback: () => {
                        layerManager = vexMap.getLayerManager();


                        //Set all layers visibility to false except for Bluesky Ultra.
                        layerManager.getVexcelLayers().forEach (l=> {
                                l.setVisible(false);
                        } ) ;

                        //now Just Turn On Bluesky Ultra
                        var blueskyLayer = vexMap.getLayerManager().getVexcelLayer(Vexcel.Constants.BuiltInLayers.BLUESKY);
                        blueskyLayer.setVisible(true);

                        //These buttons/bars can be used to enable buttons within the map control viewer
                        //Adding Map Buttons
                        const group = new Vexcel.Control.Bar({toggleOne: true, group: true});
                        vexMap.addControl(group);
                        group.setPosition("bottom-right");

                        const twoD = new Vexcel.Control.Toggle({
                            html: "2D",
                            title: "2D",
                            active: true,
                            onToggle(active) {
                                if (active) {
                                changeMode('2D');
                                }
                            },
                        });

                        const threeD = new Vexcel.Control.Toggle({
                            html: "3D",
                            title: "3D",
                            onToggle(active) {
                                if (active) {
                                changeMode('3D');
                                }
                            },
                        });

                        const north = new Vexcel.Control.Toggle({
                            html: "N",
                            title: "North",
                            active: true,
                            onToggle(active) {
                                if (active) {
                                changeOrientation('N');
                                }
                            },
                        });
                        const south = new Vexcel.Control.Toggle({
                            html: "S",
                            title: "South",
                            onToggle(active) {
                                if (active) {
                                changeOrientation('S');
                                }
                            },
                        });
                        const east = new Vexcel.Control.Toggle({
                            html: "E",
                            title: "East",
                            onToggle(active) {
                                if (active) {
                                changeOrientation('E');
                                }
                            },
                        });
                        const west = new Vexcel.Control.Toggle({
                            html: "W",
                            title: "West",
                            onToggle(active) {
                                if (active) {
                                changeOrientation('W');
                                }
                            },
                        });

                        group.addControl(twoD);
                        group.addControl(threeD);
                        group.addControl(north);
                        group.addControl(south);
                        group.addControl(east);
                        group.addControl(west);
                    }
                }
            });

            //Event listener example for map click to show lat/long
            vexMap.addListener(Vexcel.Events.MapEvents.CLICK, (e) => {
                let coordinatesString =  "" + e.coordinates;
                var clk = coordinatesString.split(",");
                alert(clk);
            });
            


        }

        function wait(ms) {
            var start = Date.now(),
                now = start;
            while (now - start < ms) {
                now = Date.now();
            }
        }

        function changeOrientation(orientation) {  
            vexMap.changeOrientation(orientation);
        }

        function changeMode(mode) {
            vexMap.changeMode(mode)
        }

        function parseCoordinates() {
            //Parse the latitude and longitude from the text box. 
            var SearchText = searchBox.value.trim();

            var coords = SearchText.split(",");
            latitude = parseFloat(coords[0].trim());
            longitude = parseFloat(coords[1].trim());

            const newCenter = [longitude, latitude];
            console.log(newCenter);
            vexMap.setCenter(newCenter);
        }


        function Login() {
            refreshAuthToken();
        }
        
        function getUserType() {
            if (authToken != "") {
                return;}

            var userID = txtUserid.value.trim();

            let url = new URL("https://api.gic.org/auth/GetUserAuthenticationSystem");
           

            // Add KVP
            var urlencoded = new URLSearchParams();
            urlencoded.append("username", userID);

            url.search = urlencoded.toString();

            fetch(url)
                .then(res => res.json())
                .then(data => {
                    console.log(data);
                    //const dataType = data.type
                    const dataType = "password"
                    if (dataType == "password")
                    {
                        // Disable user input
                        document.getElementById("txtUserid").disabled = true;
                        // Show password input
                        document.getElementById("pwBox").style = "";
                        // Hide "Next" button
                        document.getElementById("NextBtn").style = "display: none";
                        // Show "Login" button
                        document.getElementById("LoginBtn").style = "";
                    }
                    else if (dataType == "federated")
                    {
                        codeEndpoint = data.url + redirect_uri;
                        window.location.href = codeEndpoint;
                    }

                }).catch(err => {
                    // code to handle request errors
                });
        }

        function refreshAuthToken() {
            console.log("authToken", authToken)
            if (authToken != "") {return;}

            var userID  = txtUserid.value.trim();
            var password  = pwBox.value.trim();

            var myHeaders = new Headers();
            myHeaders.append("Content-Type", "application/x-www-form-urlencoded");

            var urlencoded = new URLSearchParams();
            urlencoded.append("username", userID);
            urlencoded.append("password", password);

            var requestOptions = {
                method: "POST",
                headers: myHeaders,
                body: urlencoded,
                redirect: "follow"
            };
            var authURL = "https://api.gic.org/auth/Login";

            fetch(authURL,requestOptions )
                .then(res => res.json())
                .then(data => {
                    //Grab the token from the response
                    authToken =  data.token;
                    window.localStorage.setItem("authToken", authToken)
                    //Great! we have our token, lets go load the map control
                    loadMapScenario();
                }).catch(err => {
                    // code to handle request errors
                });

        }


        function refreshFederatedAuthToken(code, state) {
            if (authToken != "") return;

            var urlencoded = new URLSearchParams();
            urlencoded.append("code", code);
            urlencoded.append("state", state);
            urlencoded.append("redirect_uri", redirect_uri);

            let url = new URL("https://api.gic.org/auth/FederatedLogin");

            url.search = urlencoded.toString();

            fetch(url)
                .then(res => res.json())
                .then(data => {
                    console.log(data)

                    //Grab the token from the response
                    authToken =  data.token;

                    //Great! we have our token, lets go Load the map control
                    loadMapScenario();
                }).catch(err => {
                    // code to handle request errors
                });

        }

        loadMapScenario();
    </script>
    
	</html>